<<--foreach item="schema" items="schemas.getSchemas().values()"-->>
<<--set key="schemaPackage" value="concat(package,'.',toLowerCase(schema.getName()))"-->>
<<--foreach item="entity" items="schema.getEntities().values()"-->>
<<--set key="tableName" value="toUpperCase(toSnakeCase(fromSnakeCase(entity.getDDL().getTable())))"-->>
<<--set key="className" value="toPascalCase(fromCamelCase(entity.getName()))"-->>
<<--set key="filePath" value="concat(replace(schemaPackage,'.','/'),'/',className,'.java')"-->>
<<--file path="filePath"-->>
package <<--get key="schemaPackage"-->>;

import jakarta.persistence.*;

@Entity
@Table(name = "<<--get key="tableName"-->>")
<<--set key="isBaseClass" value="false"-->>
<<--foreach item="otherEntity" items="schema.getEntities().values()"-->>
<<--if condition="eq(className,otherEntity.getInherits().getBase())"-->>
<<--set key="isBaseClass" value="true"-->>
<<==if==>>
<<==foreach==>>
<<--if condition="isBaseClass"-->>
@Inheritance(strategy = InheritanceType.JOINED)
<<==if==>>
<<--set key="isSubClass" value="isPresent(entity.getInherits().getBase())"-->>
<<--if condition="and(isSubClass,not(entity.getIds().isEmpty()))"-->>
<<--set key="ddlColumns" value="entity.getInherits().getDDL().getTable().getColumns()"-->>
<<--if condition="eq(1,ddlColumns.size())"-->>
<<--set key="ddlColumnName" value="first(ddlColumns.keySet())"-->>
@AttributeOverride(name="<<--get key="toCamelCase(fromSnakeCase(ddlColumnName))"-->>", column=@Column(name="<<--get key="toUpperCase(toSnakeCase(fromSnakeCase(ddlColumnName)))"-->>"))
<<==if==>>
<<--if condition="lt(1,ddlColumns.size())"-->>
@AttributeOverrides({
<<--foreach iterator="columnIte" items="ddlColumns.keySet()"-->>
    @AttributeOverride(name="<<--get key="toCamelCase(fromSnakeCase(columnIte.getItem()))"-->>", column=@Column(name="<<--get key="toUpperCase(toSnakeCase(fromSnakeCase(columnIte.getItem())))"-->>"))<<--unless condition="columnIte.isLast()"-->>, <<==unless==>>
<<==foreach==>>
})
<<==if==>>
<<==if==>>
<<--if condition="lt(1,entity.getIds().size())"-->>
@IdClass(<<--get key="className"-->>.<<--get key="className"-->>Id.class)
<<==if==>>
public class <<--get key="className"-->><<--if condition="isSubClass"-->> extends <<--get key="entity.getInherits().getBase()"-->><<==if==>> {

<<--if condition="lt(1,entity.getIds().size())"-->>
<<--set key="idClassName" value="concat(className,'Id')"-->>
    public static class <<--get key="idClassName"-->> implements java.io.Serializable {
<<--foreach item="idColumnName" items="entity.getIds()"-->>
        private <<--set key="field" value="entity.getFields().get(idColumnName)"-->><<--include path="'hibernate-field-type.katip'"-->> <<--get key="idColumnName"-->>;
<<==foreach==>>

        public <<--get key="idClassName"-->>() {
        }

        public <<--get key="idClassName"-->>(<<--foreach iterator="idColumnNameIte" items="entity.getIds()"-->><<--set key="field" value="entity.getFields().get(idColumnNameIte.getItem())"-->><<--include path="'hibernate-field-type.katip'"-->> <<--get key="idColumnNameIte.getItem()"-->><<--unless condition="idColumnNameIte.isLast()"-->>, <<==unless==>><<==foreach==>>) {
<<--foreach item="idColumnName" items="entity.getIds()"-->>
            this.<<--get key="idColumnName"-->> = <<--get key="idColumnName"-->>;
<<==foreach==>>
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            <<--get key="idClassName"-->> other = (<<--get key="idClassName"-->>) o;
            return <<--foreach iterator="idColumnNameIte" items="entity.getIds()"-->>java.util.Objects.equals(<<--get key="idColumnNameIte.getItem()"-->>, other.<<--get key="idColumnNameIte.getItem()"-->>)<<--unless condition="idColumnNameIte.isLast()"-->> && <<==unless==>><<==foreach==>>;
        }

        @Override
        public int hashCode() {
            return java.util.Objects.hash(<<--foreach iterator="idColumnNameIte" items="entity.getIds()"-->><<--get key="idColumnNameIte.getItem()"-->><<--unless condition="idColumnNameIte.isLast()"-->>, <<==unless==>><<==foreach==>>);
        }
    }
<<==if==>>

<<--foreach item="field" items="entity.getFields().values()"-->>
<<--set-block key="fieldType"-->><<--include path="'hibernate-field-type.katip'"-->><<==set-block==>>
<<--set key="fieldName" value="toCamelCase(fromCamelCase(field.getName()))"-->>
<<--set key="isIdField" value="entity.getIds().contains(field.getName())"-->>
<<--if condition="not(and(isIdField,isSubClass))"-->>
<<--if condition="isIdField"-->>
    @Id
<<==if==>>
<<--if condition="field.isEnum()"-->>
    @Convert(converter = <<--get key="fieldType"-->>Converter.class)
<<==if==>>
<<--if condition="field.isSimple()"-->>
    @Column(name="<<--get key="toUpperCase(toSnakeCase(fromSnakeCase(field.getDDL().getColumn())))"-->>")
<<==if==>>
<<--if condition="field.isRelational()"-->>
<<--set key="ddlColumns" value="field.getDDL().getTable().getColumns()"-->>
<<--set key="relationType" value="field.getDDL().getType().name()"-->>
<<--set key="fetchType" value="field.getFetch().name()"-->>
<<--if condition="eq('ONE_TO_ONE',relationType)"-->>
    @OneToOne(cascade = CascadeType.ALL<<--if condition="eq('LAZY',fetchType)"-->>, fetch = FetchType.LAZY<<==if==>><<--if condition="eq('EAGER',fetchType)"-->>, fetch = FetchType.EAGER<<==if==>>)
<<==if==>>
<<--if condition="eq('ONE_TO_MANY',relationType)"-->>
    @OneToMany(cascade = CascadeType.ALL<<--if condition="eq('LAZY',fetchType)"-->>, fetch = FetchType.LAZY<<==if==>><<--if condition="eq('EAGER',fetchType)"-->>, fetch = FetchType.EAGER<<==if==>>)
<<--if condition="eq(1,ddlColumns.size())"-->>
<<--set key="ddlColumnName" value="first(ddlColumns.values())"-->>
    @JoinColumn(name="<<--get key="toUpperCase(toSnakeCase(fromSnakeCase(ddlColumnName)))"-->>", insertable=false, updatable=false)
<<==if==>>
<<--if condition="lt(1,ddlColumns.size())"-->>
    @JoinColumns({<<--foreach iterator="columnsIte" items="field.getDDL().getTable().getColumns().keySet()"-->>@JoinColumn(name = "<<--get key="toUpperCase(columnsIte.getItem())"-->>", insertable=false, updatable=false)<<--unless condition="columnsIte.isLast()"-->>, <<==unless==>><<==foreach==>>})
<<==if==>>
<<==if==>>
<<--if condition="eq('MANY_TO_ONE',relationType)"-->>
    @ManyToOne(cascade = CascadeType.ALL<<--if condition="eq('LAZY',fetchType)"-->>, fetch = FetchType.LAZY<<==if==>><<--if condition="eq('EAGER',fetchType)"-->>, fetch = FetchType.EAGER<<==if==>>)
<<--if condition="eq(1,ddlColumns.size())"-->>
<<--set key="ddlColumnName" value="first(ddlColumns.keySet())"-->>
    @JoinColumn(name="<<--get key="toUpperCase(toSnakeCase(fromSnakeCase(ddlColumnName)))"-->>", insertable=false, updatable=false)
<<==if==>>
<<--if condition="lt(1,ddlColumns.size())"-->>
    @JoinColumns({<<--foreach iterator="columnsIte" items="field.getDDL().getTable().getColumns().keySet()"-->>@JoinColumn(name = "<<--get key="toUpperCase(columnsIte.getItem())"-->>", insertable=false, updatable=false)<<--unless condition="columnsIte.isLast()"-->>, <<==unless==>><<==foreach==>>})
<<==if==>>
<<==if==>>
<<--if condition="eq('MANY_TO_MANY',relationType)"-->>
    @ManyToMany(cascade = CascadeType.ALL<<--if condition="eq('LAZY',fetchType)"-->>, fetch = FetchType.LAZY<<==if==>><<--if condition="eq('EAGER',fetchType)"-->>, fetch = FetchType.EAGER<<==if==>>)
    @JoinTable(
        name = "<<--get key="toUpperCase(toSnakeCase(fromSnakeCase(field.getDDL().getTable().getName())))"-->>",
        joinColumns = {<<--foreach iterator="columnsIte" items="field.getDDL().getTable().getColumns().values()"-->>@JoinColumn(name = "<<--get key="toUpperCase(columnsIte.getItem())"-->>", insertable=false, updatable=false)<<--unless condition="columnsIte.isLast()"-->>, <<==unless==>><<==foreach==>>},
        inverseJoinColumns = {<<--foreach iterator="columnsIte" items="field.getDDL().getInverseTable().getColumns().values()"-->>@JoinColumn(name = "<<--get key="toUpperCase(columnsIte.getItem())"-->>", insertable=false, updatable=false)<<--unless condition="columnsIte.isLast()"-->>, <<==unless==>><<==foreach==>>}
    )
<<==if==>>
<<==if==>>
    private <<--get key="fieldType"-->> <<--get key="toCamelCase(fromCamelCase(field.getName()))"-->>;
<<==if==>>
<<==foreach==>>

<<--foreach item="field" items="entity.getFields().values()"-->>
<<--set key="isIdField" value="entity.getIds().contains(field.getName())"-->>
<<--if condition="not(and(isIdField,isSubClass))"-->>
<<--set-block key="fieldType"-->><<--include path="'hibernate-field-type.katip'"-->><<==set-block==>>
<<--set key="fieldName" value="toCamelCase(fromCamelCase(field.getName()))"-->>
<<--set key="propertyName" value="toPascalCase(fromCamelCase(field.getName()))"-->>
    public <<--get key="fieldType"-->> get<<--get key="propertyName"-->>() {
        return <<--get key="fieldName"-->>;
    }
    public void set<<--get key="propertyName"-->>(<<--get key="fieldType"-->> <<--get key="fieldName"-->>) {
        this.<<--get key="fieldName"-->> = <<--get key="fieldName"-->>;
    }

<<==if==>>
<<==foreach==>>

<<--foreach item="field" items="entity.getFields().values()"-->>
<<--if condition="field.isEnum()"-->>
<<--set key="enumType" value="concat(toPascalCase(fromCamelCase(field.getName())),'Type')"-->>
    public enum <<--get key="enumType"-->> {
<<--foreach iterator="enumEntryIte" items="field.getEnumValues().entrySet()"-->>
        <<--get key="toUpperCase(fromSnakeCase(enumEntryIte.getItem().getKey()))"-->>("<<--get key="enumEntryIte.getItem().getValue()"-->>"),
<<==foreach==>>
        ;
        final String value;
        <<--get key="enumType"-->>(String value) {
            this.value = value;
        }
        public String getValue() {
            return value;
        }
        public static <<--get key="enumType"-->> findByValue(String value) {
            return java.util.stream.Stream.of(values()).filter(it -> it.value.equals(value)).findAny().orElse(null);
        }
    }

    @Converter(autoApply = true)
    public static class <<--get key="enumType"-->>Converter implements AttributeConverter<<<--get key="enumType"-->>, String> {
        @Override
        public String convertToDatabaseColumn(<<--get key="enumType"-->> enumConstant) {
            return enumConstant == null ? null : enumConstant.value;
        }
        @Override
        public <<--get key="enumType"-->> convertToEntityAttribute(String value) {
            return <<--get key="enumType"-->>.findByValue(value);
        }
    }
<<==if==>>
<<==foreach==>>
}
<<==file==>>
<<==foreach==>>
<<==foreach==>>
<<--include path="'hibernate-cfg-xml.katip'"-->>