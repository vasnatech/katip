<<--file path="entitySchema"-->>
{
  "meta": {
    "@schema-type": "entity",
    "@schema-version": "1",
    "created-by": "katip",
    "created-at": "<<--get key="#now()"-->>",
    "updated-by": "katip",
    "updated-at": "<<--get key="#now()"-->>",
    "ddl-schema": "<<--get key="ddlSchema"-->>"
  },
<<--foreach iterator="schemaIte" items="schemas.schemas.values"-->>
  "<<--get key="schemaIte.item.name"-->>": {
    "ddl": {
      "schema": "<<--get key="schemaIte.item.name"-->>"
    },
    "entities": {
<<--foreach iterator="tableIte" items="schemaIte.item.tables.values"-->>
<<--set key="className" value="#toPascalCase(#fromSnakeCase(tableIte.item.name))"-->>
      "<<--get key="className"-->>": {
        "ddl": {
          "table": "<<--get key="tableIte.item.name"-->>"
        },
<<--unless condition="tableIte.item.primaryKey.empty"-->>
        "ids": [<<--foreach iterator="primaryKeyColumnIte" items="tableIte.item.primaryKey"-->>"<<--get key="primaryKeyColumnIte.item"-->>"<<--unless condition="primaryKeyColumnIte.last"-->>, <<==unless==>><<==foreach==>>],
<<==unless==>>
        "fields": {
<<--set key="fieldNames" value="#setOf()"-->>
<<--set key="fieldComma" value="false"-->>
<<--foreach item="column" items="tableIte.item.columns.values"-->>
<<--set key="fieldName" value="#toCamelCase(#fromSnakeCase(column.name))"-->>
<<--exe expression="fieldNames.add(fieldName)"-->>
<<--if condition="fieldComma"-->>
,
<<==if==>>
<<--set key="fieldComma" value="true"-->>
          "<<--get key="fieldName"-->>": {
            "ddl": {
              "column": "<<--get key="column.name"-->>"
            },
            "type": "<<--include path="'entity-field-type.katip'"-->>",
<<--if condition="column.isEnum()"-->>
            "enum-values": {
<<--foreach iterator="enumEntryIte" items="column.enumValues"-->>
              "<<--get key="enumEntryIte.item.key"-->>": "<<--get key="enumEntryIte.item.value"-->>"<<--unless condition="enumEntryIte.last"-->>,<<==unless==>>

<<==foreach==>>
            },
<<==if==>>
            "nullable": <<--get key="column.nullable"-->>
          }<<//
<<==foreach==>>
<<--unless condition="tableIte.item.foreignKeys.empty"-->>
<<--foreach iterator="foreignKeyIte" items="tableIte.item.foreignKeys.values"-->>
<<--set key="fieldName" value="''"-->>
<<--set key="oneToOne" value="true"-->>
<<--foreach iterator="foreignKeyColumnEntryIte" items="foreignKeyIte.item.columns"-->>
<<--unless condition="foreignKeyColumnEntryIte.first"-->><<--set key="fieldName" value="#concat(fieldName,'_')"-->><<==unless==>>
<<--set key="fieldName" value="#concat(fieldName,foreignKeyColumnEntryIte.item.key)"-->>
<<--set key="oneToOne" value="oneToOne && tableIte.item.primaryKey.contains(foreignKeyColumnEntryIte.item.key)"-->>
<<==foreach==>>
<<--set key="fieldName" value="#concat(fieldName,'_',foreignKeyIte.item.referenceTable)"-->>
<<--set key="fieldName" value="#toCamelCase(#fromSnakeCase(fieldName))"-->>
<<--exe expression="fieldNames.add(fieldName)"-->>
,
          "<<--get key="fieldName"-->>": {
            "ddl": {
              "relation": "<<--if condition="oneToOne"-->>one-to-one<<==if==>><<--unless condition="oneToOne"-->>many-to-one<<==unless==>>",
              "table": "<<--get key="foreignKeyIte.item.referenceTable"-->>",
              "columns": {<<//
<<--foreach iterator="foreignKeyColumnEntryIte" items="foreignKeyIte.item.columns"-->>
"<<--get key="foreignKeyColumnEntryIte.item.key"-->>": "<<--get key="foreignKeyColumnEntryIte.item.value"-->>"<<--unless condition="foreignKeyColumnEntryIte.last"-->>, <<==unless==>>
<<==foreach==>>
}
            },
            "fetch": "lazy",
            "type": "entity",
            "item-type": "<<--get key="#toPascalCase(#fromSnakeCase(foreignKeyIte.item.referenceTable))"-->>"
          }<<//

<<==foreach==>>
<<==unless==>>
<<--foreach item="otherTable" items="schemaIte.item.tables.values"-->>
<<--foreach iterator="foreignKeyIte" items="otherTable.foreignKeys.values"-->>
<<--if condition="tableIte.item.name==foreignKeyIte.item.referenceTable"-->>
<<--set key="fieldName" value="''"-->>
<<--foreach iterator="foreignKeyColumnEntryIte" items="foreignKeyIte.item.columns"-->>
<<--unless condition="foreignKeyColumnEntryIte.first"-->><<--set key="fieldName" value="#concat(fieldName,'_')"-->><<==unless==>>
<<--set key="fieldName" value="#concat(fieldName,foreignKeyColumnEntryIte.item.key)"-->>
<<==foreach==>>
<<--set key="fieldName" value="#concat(fieldName,'_',otherTable.name,'_list')"-->>
<<--set key="fieldName" value="#toCamelCase(#fromSnakeCase(fieldName))"-->>
<<--exe expression="fieldNames.add(fieldName)"-->>
,
          "<<--get key="fieldName"-->>": {
            "ddl": {
              "relation": "one-to-many",
              "table": "<<--get key="otherTable.name"-->>",
              "columns": {<<//
<<--foreach iterator="foreignKeyColumnEntryIte" items="foreignKeyIte.item.columns"-->>
"<<--get key="foreignKeyColumnEntryIte.item.value"-->>": "<<--get key="foreignKeyColumnEntryIte.item.key"-->>"<<--unless condition="foreignKeyColumnEntryIte.last"-->>, <<==unless==>>
<<==foreach==>>
}
            },
            "fetch": "lazy",
            "type": "list",
            "item-type": "<<--get key="#toPascalCase(#fromSnakeCase(otherTable.name))"-->>"
          }<<//
<<==if==>>
<<==foreach==>>
<<==foreach==>>

        }
      }<<--unless condition="tableIte.last"-->>,<<==unless==>>

<<==foreach==>>
    }
  }
<<==foreach==>>
}
<<==file==>>